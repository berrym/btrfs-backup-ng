#!/bin/bash
#
# direct-transfer-test - Test direct BTRFS snapshot transfers over SSH
#
# This script creates a temporary snapshot and tries to transfer it directly
# to a remote host using different methods to identify what works.

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Find the full path to btrfs command
find_btrfs_cmd() {
    for path in "/usr/bin/btrfs" "/usr/sbin/btrfs" "/bin/btrfs" "/sbin/btrfs"; do
        if [[ -x "$path" ]]; then
            echo "$path"
            return 0
        fi
    done
    
    # Try using which command
    local which_result=$(which btrfs 2>/dev/null)
    if [[ -x "$which_result" ]]; then
        echo "$which_result"
        return 0
    fi
    
    # If we get here, btrfs command not found
    echo ""
    return 1
}

# Get the btrfs command path
BTRFS_CMD=$(find_btrfs_cmd)
if [[ -z "$BTRFS_CMD" ]]; then
    echo -e "${RED}ERROR: btrfs command not found in PATH${NC}"
    echo "Please install btrfs-progs package"
    exit 1
fi

# Function to run command with sudo only if not already root
run_elevated() {
    if [[ $EUID -eq 0 ]]; then
        if [[ "$1" == "btrfs" ]]; then
            # Use full path for btrfs command
            shift
            "$BTRFS_CMD" "$@"
        else
            "$@"
        fi
    else
        if [[ "$1" == "btrfs" ]]; then
            # Use full path for btrfs command
            shift
            sudo "$BTRFS_CMD" "$@"
        else
            sudo "$@"
        fi
    fi
}

# Default values
SOURCE_PATH="/var/log"
DESTINATION="mberry@192.168.5.79:/home/mberry/backups/var-log"
IDENTITY_FILE="$HOME/.ssh/id_ed25519"
USE_SUDO=true
SNAPSHOT_NAME="direct-test-$(date +%Y%m%d-%H%M%S)"
SNAPSHOT_DIR="/var/.btrfs-backup-ng/snapshots"
FULL_SNAPSHOT_PATH="$SNAPSHOT_DIR/$SNAPSHOT_NAME"

function log_info() {
    echo -e "[${BLUE}INFO${NC}] $1"
}

function log_success() {
    echo -e "[${GREEN}SUCCESS${NC}] $1"
}

function log_warning() {
    echo -e "[${YELLOW}WARNING${NC}] $1"
}

function log_error() {
    echo -e "[${RED}ERROR${NC}] $1" >&2
}

function cleanup() {
    log_info "Cleaning up..."
    run_elevated btrfs subvolume delete "$FULL_SNAPSHOT_PATH" 2>/dev/null || true
}

# Register cleanup on exit
trap cleanup EXIT

# Parse SSH destination
if [[ "$DESTINATION" =~ .*@.* ]]; then
    HOST="${DESTINATION%%:*}"
    HOST="${HOST#*@}"
    USER="${DESTINATION%%@*}"
    PATH="${DESTINATION#*:}"
else
    HOST="${DESTINATION%%:*}"
    USER="$USER"
    PATH="${DESTINATION#*:}"
fi

log_info "Host: $HOST"
log_info "User: $USER"
log_info "Path: $PATH"
log_info "Identity file: $IDENTITY_FILE"

# Check SSH_AUTH_SOCK if running as root
if [[ $EUID -eq 0 && -z "$SSH_AUTH_SOCK" && -n "$SUDO_USER" ]]; then
    log_warning "Running as root without SSH_AUTH_SOCK - attempting to fix"
    USER_SSH_AUTH_SOCK=$(sudo -u "$SUDO_USER" printenv SSH_AUTH_SOCK 2>/dev/null)
    if [[ -n "$USER_SSH_AUTH_SOCK" ]]; then
        export SSH_AUTH_SOCK="$USER_SSH_AUTH_SOCK"
        log_success "Fixed SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
    else
        log_error "Cannot get SSH_AUTH_SOCK from original user - SSH authentication will likely fail"
        log_error "Please run with: sudo SSH_AUTH_SOCK=\$SSH_AUTH_SOCK $0"
        exit 1
    fi
fi

# Create snapshot directory if it doesn't exist
if [[ ! -d "$SNAPSHOT_DIR" ]]; then
    log_info "Creating snapshot directory..."
    run_elevated mkdir -p "$SNAPSHOT_DIR"
fi

# Create a temporary snapshot
log_info "Creating temporary snapshot..."
run_elevated btrfs subvolume snapshot -r "$SOURCE_PATH" "$FULL_SNAPSHOT_PATH"
echo "Created snapshot: $($BTRFS_CMD subvolume show "$FULL_SNAPSHOT_PATH" | head -1)"
log_success "Created snapshot: $FULL_SNAPSHOT_PATH"

# Verify the remote filesystem is BTRFS
log_info "Verifying remote filesystem is BTRFS..."
REMOTE_FS=$(ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo stat -f -c %T $PATH" 2>/dev/null || echo "unknown")
if [[ "$REMOTE_FS" == "btrfs" ]]; then
    log_success "Remote filesystem is BTRFS"
else
    log_warning "Remote filesystem may not be BTRFS (found: $REMOTE_FS)"
    log_info "Checking with alternative method..."
    
    # Try alternative methods to check
    if ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo df -T $PATH" 2>/dev/null | grep -q "btrfs"; then
        log_success "Remote filesystem is BTRFS (confirmed with df)"
    else
        log_error "Remote filesystem is not BTRFS. Transfers will fail."
        exit 1
    fi
fi

# Check if btrfs command is available remotely
log_info "Checking if btrfs command is available on remote host..."
if ssh -i "$IDENTITY_FILE" "$USER@$HOST" "which btrfs" &>/dev/null; then
    log_success "btrfs command is available on remote host"
else
    log_warning "btrfs command not found on remote host"
    if ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo which btrfs" &>/dev/null; then
        log_success "btrfs command is available with sudo"
    else
        log_error "btrfs command not found on remote host, even with sudo"
        log_error "Please install btrfs-progs package on remote host"
        exit 1
    fi
fi

# Ensure destination directory exists
log_info "Ensuring destination directory exists..."
ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo mkdir -p $PATH"

# Try method 1: Direct SSH pipe with sudo
log_info "Method 1: Direct SSH pipe with sudo"
echo "$ $BTRFS_CMD send $FULL_SNAPSHOT_PATH | ssh -i $IDENTITY_FILE $USER@$HOST 'sudo btrfs receive $PATH'"
if "$BTRFS_CMD" send "$FULL_SNAPSHOT_PATH" | ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo btrfs receive $PATH"; then
    log_success "Method 1 succeeded!"
    
    # Verify snapshot was received
    if ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo btrfs subvolume list -o $PATH" | grep -q "$SNAPSHOT_NAME"; then
        log_success "Snapshot verified on remote host!"
    else
        log_warning "Snapshot not found in subvolume list, checking with direct path"
        if ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo test -d $PATH/$SNAPSHOT_NAME"; then
            log_success "Snapshot directory exists on remote host!"
        else
            log_error "Snapshot directory not found on remote host"
            log_info "Contents of remote directory:"
            ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo ls -la $PATH"
        fi
    fi
else
    log_error "Method 1 failed!"
fi

# Try method 2: Direct SSH pipe with buffer
command -v mbuffer >/dev/null 2>&1 && HAS_MBUFFER=true || HAS_MBUFFER=false
if $HAS_MBUFFER; then
    log_info "Method 2: Direct SSH pipe with mbuffer"
    echo "$ $BTRFS_CMD send $FULL_SNAPSHOT_PATH | mbuffer -q -s 64M | ssh -i $IDENTITY_FILE $USER@$HOST 'sudo btrfs receive $PATH'"
    if "$BTRFS_CMD" send "$FULL_SNAPSHOT_PATH" | mbuffer -q -s 64M | ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo btrfs receive $PATH"; then
        log_success "Method 2 succeeded!"
    else
        log_error "Method 2 failed!"
    fi
else
    log_info "Skipping method 2 (mbuffer not installed)"
fi

# Try method 3: Direct SSH pipe with netcat
log_info "Method 3: Using netcat for transfer"
NC_PORT=12345
echo "$ nc -l $NC_PORT | sudo btrfs receive $PATH (remote)"
echo "$ btrfs send $FULL_SNAPSHOT_PATH | nc $HOST $NC_PORT (local)"

# Start receiver on remote host in background
ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo nc -l $NC_PORT | sudo btrfs receive $PATH" &
NC_PID=$!

# Wait a moment for the receiver to start
sleep 2

# Send snapshot
if "$BTRFS_CMD" send "$FULL_SNAPSHOT_PATH" | nc "$HOST" "$NC_PORT"; then
    log_success "Method 3 succeeded!"
else
    log_error "Method 3 failed!"
fi

# Show summary of remote filesystem
log_info "Remote filesystem summary:"
ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo btrfs filesystem usage $PATH"

# List subvolumes on remote host
log_info "Remote subvolumes:"
ssh -i "$IDENTITY_FILE" "$USER@$HOST" "sudo btrfs subvolume list -o $PATH"

log_success "Direct transfer test complete!"