#!/bin/bash
#
# ssh-backup-verify - A simple testing wrapper for btrfs-backup-ng SSH transfers
#
# This script verifies SSH backups are working correctly by performing the
# necessary validation steps and executing a manual SSH backup.
#

set -e

# Find the full path to btrfs command
find_btrfs_cmd() {
    for path in "/usr/bin/btrfs" "/usr/sbin/btrfs" "/bin/btrfs" "/sbin/btrfs"; do
        if [[ -x "$path" ]]; then
            echo "$path"
            return 0
        fi
    done
    
    # Try using which command
    local which_result=$(which btrfs 2>/dev/null)
    if [[ -x "$which_result" ]]; then
        echo "$which_result"
        return 0
    fi
    
    # If we get here, btrfs command not found
    echo ""
    return 1
}

# Get the btrfs command path
BTRFS_CMD=$(find_btrfs_cmd)
if [[ -z "$BTRFS_CMD" ]]; then
    echo -e "${RED}ERROR: btrfs command not found in PATH${NC}"
    echo "Please install btrfs-progs package"
    exit 1
fi

# Function to run command with sudo only if not already root
run_elevated() {
    if [[ $EUID -eq 0 ]]; then
        if [[ "$1" == "btrfs" ]]; then
            # Use full path for btrfs command
            shift
            "$BTRFS_CMD" "$@"
        else
            "$@"
        fi
    else
        if [[ "$1" == "btrfs" ]]; then
            # Use full path for btrfs command
            shift
            sudo "$BTRFS_CMD" "$@"
        else
            sudo "$@"
        fi
    fi
}

# Default values
IDENTITY_FILE=""
VERBOSE=false
SSH_SUDO=true
SOURCE=""
DESTINATION=""
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
TRANSFER_SCRIPT="${SCRIPT_DIR}/bin/btrfs-ssh-transfer"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print banner
function print_banner() {
    echo -e "${BLUE}=======================================================${NC}"
    echo -e "${BLUE}= BTRFS-BACKUP-NG SSH VERIFICATION TOOL               =${NC}"
    echo -e "${BLUE}=======================================================${NC}"
    echo
}

# Print usage information
function show_usage() {
    echo "Usage: $(basename $0) [options] <source_subvolume> <user@host:/destination_path>"
    echo
    echo "Options:"
    echo "  -i, --identity <file>      SSH identity file"
    echo "  -n, --no-sudo              Don't use sudo on remote host"
    echo "  -v, --verbose              Enable verbose output"
    echo "  -h, --help                 Show this help message"
    echo
    echo "Examples:"
    echo "  $(basename $0) /var/log ssh://user@remotehost:/path/to/backups"
    echo "  $(basename $0) -i ~/.ssh/id_ed25519 /var/log ssh://user@remotehost:/path/to/backups"
    echo
}

function log_info() {
    echo -e "[${BLUE}INFO${NC}] $1"
}

function log_success() {
    echo -e "[${GREEN}SUCCESS${NC}] $1"
}

function log_warning() {
    echo -e "[${YELLOW}WARNING${NC}] $1"
}

function log_error() {
    echo -e "[${RED}ERROR${NC}] $1" >&2
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -i|--identity)
            IDENTITY_FILE="$2"
            shift 2
            ;;
        -n|--no-sudo)
            SSH_SUDO=false
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -h|--help)
            print_banner
            show_usage
            exit 0
            ;;
        *)
            if [[ -z "$SOURCE" ]]; then
                SOURCE="$1"
                shift
            elif [[ -z "$DESTINATION" ]]; then
                # Handle ssh:// prefix if present
                if [[ "$1" == ssh://* ]]; then
                    DESTINATION="${1#ssh://}"
                else
                    DESTINATION="$1"
                fi
                shift
            else
                log_error "Unexpected argument: $1"
                show_usage
                exit 1
            fi
            ;;
    esac
done

print_banner

# Check for required arguments
if [[ -z "$SOURCE" || -z "$DESTINATION" ]]; then
    log_error "Missing required arguments"
    show_usage
    exit 1
fi

# Check if we're root and fix SSH_AUTH_SOCK if needed
if [[ $EUID -eq 0 && -z "$SSH_AUTH_SOCK" && -n "$SUDO_USER" ]]; then
    log_warning "Running as root without SSH_AUTH_SOCK - attempting to fix"
    USER_SSH_AUTH_SOCK=$(run_elevated -u "$SUDO_USER" printenv SSH_AUTH_SOCK 2>/dev/null)
    if [[ -n "$USER_SSH_AUTH_SOCK" ]]; then
        export SSH_AUTH_SOCK="$USER_SSH_AUTH_SOCK"
        log_success "Fixed SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
    else
        log_error "Cannot get SSH_AUTH_SOCK from original user - SSH authentication will likely fail"
        log_error "Please run with: sudo SSH_AUTH_SOCK=\$SSH_AUTH_SOCK $(basename $0) ..."
    fi
fi

# Fix identity file path if needed
if [[ -n "$IDENTITY_FILE" && ! -f "$IDENTITY_FILE" && $EUID -eq 0 && -n "$SUDO_USER" ]]; then
    # The identity file might be in the user's home directory
    USER_HOME=$(getent passwd "$SUDO_USER" | cut -d: -f6)
    if [[ -f "${USER_HOME}/${IDENTITY_FILE#$HOME/}" ]]; then
        IDENTITY_FILE="${USER_HOME}/${IDENTITY_FILE#$HOME/}"
        log_success "Using identity file: $IDENTITY_FILE"
    fi
fi

# Check if transfer script exists
if [[ ! -x "$TRANSFER_SCRIPT" ]]; then
    log_error "SSH transfer script not found at: $TRANSFER_SCRIPT"
    log_error "Please ensure btrfs-ssh-transfer script is installed and executable"
    exit 1
fi

log_info "Using SSH transfer script: $TRANSFER_SCRIPT"
log_info "Source: $SOURCE"
log_info "Destination: $DESTINATION"

# Create snapshot from source
SNAPSHOT_DIR="/var/.btrfs-backup-ng/snapshots"
SNAPSHOT_NAME="verify-$(date +%Y%m%d-%H%M%S)"
FULL_SNAPSHOT_PATH="${SNAPSHOT_DIR}/${SNAPSHOT_NAME}"

log_info "Creating temporary snapshot for verification..."
if [[ ! -d "$SNAPSHOT_DIR" ]]; then
    sudo mkdir -p "$SNAPSHOT_DIR"
fi

run_elevated btrfs subvolume snapshot -r "$SOURCE" "$FULL_SNAPSHOT_PATH"
echo "Created snapshot: $($BTRFS_CMD subvolume show "$FULL_SNAPSHOT_PATH" | head -1)"
log_success "Created verification snapshot: $FULL_SNAPSHOT_PATH"

# Build command for transfer script
CMD=("$TRANSFER_SCRIPT")
if [[ -n "$IDENTITY_FILE" ]]; then
    CMD+=("--identity" "$IDENTITY_FILE")
fi
if $SSH_SUDO; then
    CMD+=("--sudo")
fi
if $VERBOSE; then
    CMD+=("--verbose")
fi

# Add source and destination
CMD+=("$FULL_SNAPSHOT_PATH" "$DESTINATION")

log_info "Executing transfer command: ${CMD[*]}"
if run_elevated "${CMD[@]}"; then
    log_success "SSH backup verification successful!"
    log_success "Your SSH backup configuration is working correctly."
else
    EXIT_CODE=$?
    log_error "SSH backup verification failed with exit code $EXIT_CODE"
    log_error "Please check error messages above for details"
    exit $EXIT_CODE
fi

# Clean up temporary snapshot
log_info "Cleaning up temporary snapshot..."
"$BTRFS_CMD" subvolume delete "$FULL_SNAPSHOT_PATH"
log_success "Temporary snapshot removed"

log_info "Verification complete - SSH backups are working properly!"
exit 0